import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from flask import Flask, request

from config import TOKEN, WEBHOOK_URL, WEBHOOK_PATH

# ---------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ---------------------------------------
logging.basicConfig(level=logging.INFO)

# ---------------------------------------
# –ë–æ—Ç –∏ Flask
# ---------------------------------------
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
app = Flask(__name__)

# ---------------------------------------
# 72 –∫–ª–µ—Ç–∫–∏ –õ–∏–ª–∞
# ---------------------------------------
cells = {
    1: "–ù–∞—á–∞–ª–æ –ø—É—Ç–∏. –ü–µ—Ä–≤–∞—è –∫–ª–µ—Ç–∫–∞ ‚Äî —Ä–æ–∂–¥–µ–Ω–∏–µ –¥—É—à–∏ –≤ –∏–≥—Ä–µ –∂–∏–∑–Ω–∏.",
    2: "–°–æ–º–Ω–µ–Ω–∏–µ. –¢—ã –∏—â–µ—à—å, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–æ–≤–µ—Ä—è–µ—à—å —Å–µ–±–µ.",
    3: "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å. –°–∏–ª–∞ –≤–µ—Ä—ã –¥–≤–∏–≥–∞–µ—Ç —Ç–µ–±—è –≤–ø–µ—Ä—ë–¥.",
    4: "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ. –ú–∏—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–≤–æ–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.",
    5: "–õ—é–±–æ–≤—å. –í –æ—Å–Ω–æ–≤–µ –≤—Å–µ–≥–æ ‚Äî –æ–Ω–∞.",
    6: "–ò–ª–ª—é–∑–∏—è. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –≤–∏–¥–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ–±–º–∞–Ω—É—Ç—å.",
    7: "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ. –¢—ã —Å–ø–æ—Å–æ–±–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ.",
    8: "–ö–∞—Ä–º–∞. –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –∑–∞–≤—Ç—Ä–∞.",
    9: "–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ. –í—Ä–µ–º—è –æ—Ç–ø—É—Å—Ç–∏—Ç—å –ª–∏—à–Ω–µ–µ.",
    10: "–ü–æ–∫–æ–π. –ó–∞–º—Ä–∏ –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π —Ç–∏—à–∏–Ω—É.",
    11: "–ñ–µ–ª–∞–Ω–∏–µ. –¢–æ, —á—Ç–æ –¥–≤–∏–∂–µ—Ç —Ç–æ–±–æ–π.",
    12: "–ó–∞–≤–∏—Å—Ç—å. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—Ä–∞–¥—ë—Ç —Ä–∞–¥–æ—Å—Ç—å.",
    13: "–†–∞–¥–æ—Å—Ç—å. –£–º–µ–π –∑–∞–º–µ—á–∞—Ç—å —Å–≤–µ—Ç–ª–æ–µ.",
    14: "–ì–Ω–µ–≤. –û–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ.",
    15: "–°–ª—É–∂–µ–Ω–∏–µ. –ò—Å—Ç–∏–Ω–Ω–∞—è —Å–∏–ª–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å.",
    16: "–°–º–∏—Ä–µ–Ω–∏–µ. –¢—ã –Ω–µ —Ü–µ–Ω—Ç—Ä –í—Å–µ–ª–µ–Ω–Ω–æ–π.",
    17: "–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ. –ß—É–≤—Å—Ç–≤—É–π –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–¥—Ü–µ–º.",
    18: "–ó–Ω–∞–Ω–∏–µ. –ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º.",
    19: "–ú—É–¥—Ä–æ—Å—Ç—å. –í–∞–∂–Ω–æ –≤–∏–¥–µ—Ç—å —Å—É—Ç—å, –∞ –Ω–µ —Ñ–æ—Ä–º—É.",
    20: "–ú–∏–ª–æ—Å–µ—Ä–¥–∏–µ. –ë—É–¥—å –º—è–≥–∫–∏–º –¥–∞–∂–µ –≤ —Å–∏–ª–µ.",
    21: "–°–ª–∞–≤–∞. –û–ø–∞—Å–Ω–æ–µ –∏—Å–∫—É—à–µ–Ω–∏–µ.",
    22: "–≠–≥–æ. –û–Ω–æ –º–æ–∂–µ—Ç –æ—Å–ª–µ–ø–∏—Ç—å.",
    23: "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å. –°–µ–∫—Ä–µ—Ç –∏–∑–æ–±–∏–ª–∏—è.",
    24: "–°—á–∞—Å—Ç—å–µ. –û–Ω–æ –≤–Ω—É—Ç—Ä–∏, –∞ –Ω–µ —Å–Ω–∞—Ä—É–∂–∏.",
    25: "–¢—Ä—É–¥. –î–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.",
    26: "–õ–æ–∂—å. –°–∫—Ä—ã—Ç–æ–µ —Ä–∞–∑—Ä—É—à–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ.",
    27: "–î—Ä—É–∂–±–∞. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—è–¥–æ–º.",
    28: "–ö—Ä–∞—Å–æ—Ç–∞. –û–Ω–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç.",
    29: "–î–µ–Ω—å–≥–∏. –õ–∏—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –Ω–µ —Ü–µ–ª—å.",
    30: "–°—Ç—Ä–∞—Ö. –ü—Ä–µ–≥—Ä–∞–¥–∞ –∏–ª–∏ —É—Ä–æ–∫?",
    31: "–ú–µ—á—Ç–∞. –û–Ω–∞ –∑–æ–≤—ë—Ç –≤–ø–µ—Ä—ë–¥.",
    32: "–¢–µ—Ä–ø–µ–Ω–∏–µ. –î–∞–ª—å–Ω–∏–µ —Ü–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç –≤—Ä–µ–º–µ–Ω–∏.",
    33: "–ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ: –æ–Ω–∞ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç.",
    34: "–ó–Ω–∞–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞. –û–Ω–æ –Ω–µ –æ—à–∏–±–∞–µ—Ç—Å—è.",
    35: "–°–ª—É–∂–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–µ. –≠—Ç–æ –ø—É—Ç—å –≤–≤–µ—Ä—Ö.",
    36: "–õ–µ—Å—Ç—å. –ú–µ–¥–æ–≤–∞—è –ª–æ–≤—É—à–∫–∞.",
    37: "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å. –ë–∞–ª–∞–Ω—Å –≤ –¥–µ–π—Å—Ç–≤–∏–∏.",
    38: "–ú–æ–ª—á–∞–Ω–∏–µ. –û–Ω–æ –ª–µ—á–∏—Ç.",
    39: "–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ –∫ —Å–µ–±–µ. –ë—É–¥—å –º—è–≥–∫–∏–º –∫ —Å–µ–±–µ.",
    40: "–ú–æ–ª–∏—Ç–≤–∞. –û–Ω–∞ —Å–æ–µ–¥–∏–Ω—è–µ—Ç.",
    41: "–†–∞–∑—É–º. –î–æ–ª–∂–µ–Ω —Å–ª—É–∂–∏—Ç—å –¥—É—à–µ.",
    42: "–°–µ–º—å—è. –¢–≤–æ—è –æ–ø–æ—Ä–∞.",
    43: "–°–µ–∫—Å. –°–∏–ª–∞ –∏ –∏—Å–∫—É—à–µ–Ω–∏–µ.",
    44: "–©–µ–¥—Ä–æ—Å—Ç—å. –û–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.",
    45: "–¢–∞–π–Ω–∞. –ù–µ –≤—Å—ë –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Å—Ä–∞–∑—É.",
    46: "–ò—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å. –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç.",
    47: "–í–µ—Ä–∞. –î–≤–∏–≥–∞–µ—Ç –≥–æ—Ä—ã.",
    48: "–ú–æ–ª—á–∞–Ω–∏–µ —É–º–∞. –ù–∞—Å—Ç–æ—è—â–∏–π –ø–æ–∫–æ–π.",
    49: "–û—á–∏—â–µ–Ω–∏–µ. –í–∞–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è.",
    50: "–°–ª—É–∂–µ–Ω–∏–µ –ª—é–¥—è–º. –í—ã—Å—à–∏–π —Å–º—ã—Å–ª.",
    51: "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥—É—Ö–∞. –û—Å–Ω–æ–≤–∞ —Å–∏–ª—ã.",
    52: "–¶–µ–ª—å. –û–Ω–∞ –¥–∞—ë—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.",
    53: "–°—Ç—ã–¥. –¢–µ–Ω—å –¥—É—à–∏.",
    54: "–ü—Ä–∏–Ω—è—Ç–∏–µ. –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —Å–µ—Ä–¥—Ü–∞.",
    55: "–†–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∏–¥–µ—Ç—å —è—Å–Ω–æ.",
    56: "–ò—Å–∫—É—à–µ–Ω–∏–µ. –ë—É–¥—å –Ω–∞—á–µ–∫—É.",
    57: "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Å–µ–±—è.",
    58: "–£—á–∏—Ç–µ–ª—å. –ó–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ª—é–¥–µ–π.",
    59: "–£—á–µ–Ω–∏–∫–∏. –¢—ã —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫.",
    60: "–ü–æ—Ç–æ–∫. –î–æ–≤–µ—Ä—å—Å—è —Ç–µ—á–µ–Ω–∏—é.",
    61: "–≠–Ω–µ—Ä–≥–∏—è. –û–Ω–∞ –µ—Å—Ç—å –≤–æ –≤—Å—ë–º.",
    62: "–°–æ–∑–Ω–∞–Ω–∏–µ. –í—Å—ë ‚Äî –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –µ–≥–æ.",
    63: "–ò–Ω—Ç—É–∏—Ü–∏—è. –í–µ–¥–∏ —Å–µ–±—è –µ—é.",
    64: "–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ –º–∏—Ä—É. –ß–∞—Å—Ç—å —Ü–µ–ª–æ–≥–æ.",
    65: "–†–∞–≤–Ω–æ–≤–µ—Å–∏–µ. –ì–∞—Ä–º–æ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –∏ –≤–æ–≤–Ω–µ.",
    66: "–ü—Ä–æ—â–µ–Ω–∏–µ. –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è –¥—É—à–∏.",
    67: "–ß–∏—Å—Ç–æ—Ç–∞. –û–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏.",
    68: "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ. –û–Ω–æ –≤–µ–¥—ë—Ç –≤–ø–µ—Ä—ë–¥.",
    69: "–ò—Å—Ç–∏–Ω–∞. –ï—ë –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å.",
    70: "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –º–æ–º–µ–Ω—Ç–µ.",
    71: "–ï–¥–∏–Ω—Å—Ç–≤–æ. –í—Å—ë –µ—Å—Ç—å –æ–¥–Ω–æ.",
    72: "–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ. –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ò—Å—Ç–æ–∫—É.",
}

# –∑–º–µ–∏ –∏ –ª–µ—Å—Ç–Ω–∏—Ü—ã
snakes = {14: 5, 22: 9, 30: 2, 53: 17, 56: 8, 62: 19, 68: 24}
ladders = {3: 22, 8: 26, 20: 41, 28: 50, 36: 57, 44: 66, 52: 72}

# ---------------------------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
# ---------------------------------------
user_states = {}

def get_state(user_id):
    if user_id not in user_states:
        user_states[user_id] = {"pos": 1, "query": None, "history": []}
    return user_states[user_id]

# ---------------------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã
# ---------------------------------------
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    state = get_state(message.from_user.id)
    state["pos"] = 1
    state["query"] = None
    state["history"] = []
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –õ–∏–ª–∞ üé≤\n"
        "–°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å (—á–µ–≥–æ —Ö–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å/–ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å)."
    )

@dp.message_handler(lambda msg: msg.from_user.id in user_states and not user_states[msg.from_user.id]["query"])
async def set_query(message: types.Message):
    state = get_state(message.from_user.id)
    state["query"] = message.text
    await message.answer(
        f"–ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ¬´{message.text}¬ª ‚úÖ\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ /roll, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫."
    )

@dp.message_handler(commands=["roll"])
async def roll_dice(message: types.Message):
    state = get_state(message.from_user.id)
    if not state["query"]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å üëÜ")
        return

    dice = random.randint(1, 6)
    old_pos = state["pos"]
    new_pos = old_pos + dice

    if new_pos > 72:
        new_pos = 72

    if new_pos in ladders:
        new_pos = ladders[new_pos]
        extra = "‚¨ÜÔ∏è –õ–µ—Å—Ç–Ω–∏—Ü–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ç–µ–±—è –≤—ã—à–µ!"
    elif new_pos in snakes:
        new_pos = snakes[new_pos]
        extra = "‚¨áÔ∏è –ó–º–µ—è —É–≤–æ–¥–∏—Ç –Ω–∞–∑–∞–¥."
    else:
        extra = ""

    state["pos"] = new_pos
    meaning = cells[new_pos]
    state["history"].append((new_pos, meaning))

    if new_pos == 72:
        await message.answer(
            f"üé≤ –í—ã–ø–∞–ª–æ {dice}\n"
            f"–¢—ã –¥–æ—Å—Ç–∏–≥ –∫–ª–µ—Ç–∫–∏ 72! üïâ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ.\n\n"
            f"üîÆ –ó–Ω–∞—á–µ–Ω–∏–µ: {meaning}\n\n"
            f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏ /start."
        )
        return

    await message.answer(
        f"üé≤ –í—ã–ø–∞–ª–æ: {dice}\n"
        f"‚û°Ô∏è –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ –∫–ª–µ—Ç–∫—É {new_pos}\n"
        f"{extra}\n\n"
        f"üîÆ –ó–Ω–∞—á–µ–Ω–∏–µ: {meaning}"
    )

@dp.message_handler(commands=["history"])
async def show_history(message: types.Message):
    state = get_state(message.from_user.id)
    if not state["history"]:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏ —Å /roll üé≤")
        return

    text = "üìú –¢–≤–æ–π –ø—É—Ç—å:\n"
    for step, (pos, meaning) in enumerate(state["history"], start=1):
        text += f"{step}. –ö–ª–µ—Ç–∫–∞ {pos}: {meaning}\n"
    await message.answer(text)

# ---------------------------------------
# Webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
# ---------------------------------------
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook_handler():
    update = types.Update.de_json(request.json)
    dp.loop.create_task(dp.process_update(update))
    return "ok"

@app.route("/")
def index():
    return "–õ–∏–ª–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ webhook!"

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dp):
    await bot.delete_webhook()

# ---------------------------------------
# Flask –∑–∞–ø—É—Å–∫
# ---------------------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0")
